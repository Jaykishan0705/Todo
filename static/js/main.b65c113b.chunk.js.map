{"version":3,"sources":["constants/todoStatus.ts","components/TodoList.tsx","components/TodoInputForm.tsx","components/FilterTab.tsx","constants/visibilityFilter.ts","components/FilterTabPanel.tsx","constants/actionTypes.ts","reducer.ts","getVisibleTodos.ts","components/TodoApp.tsx","index.tsx"],"names":["TODO_STATUSES","COMPLETED_TODO","TodoList","props","todos","onToggleTodo","useCallback","event","console","log","onTodoClick","target","dataset","id","className","map","task","key","type","checked","todoStatus","onChange","data-id","onClick","todo","TodoInputForm","onSubmitTodo","preventDefault","submitTodo","value","onSubmit","name","placeholder","FilterTab","onTabChange","onTabClick","tabOption","currentTab","children","text","POSSIBLR_VISIBILLITY_FILTERS","SHOW_ALL","ACTIVE","COMPLETED","FilterTabPanel","tabs","tab","ACTION_TYPES","ACTIVE_TODO","CHANGE_FILTER","ADD_TODO","TOGGLE_TODO","CLEAR_COMPLETED_TODO","UNDO","REDO","reducer","state","action","foo1","tasks","concat","payload","uniqueId","activeTab","newPastTasks","pastState","futureState","filter","length","newPastState","slice","newFutureState","initialState","TodoApp","useReducer","dispatch","clearCompletedTodos","toggleTodo","remainingTaskCount","useMemo","visibleTodos","getVisibleTodos","handleUndoRedoOnKeyDown","keyCode","metaKey","shiftKey","useEffect","document","addEventListener","removeEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b65c113b.chunk.js","sourcesContent":["export const TODO_STATUSES = {\n    ACTIVE_TODO: '@@status/ACTIVE',\n    COMPLETED_TODO: '@@status/COMPLETED'\n};","import React, {useCallback} from \"react\";\nimport {TODO_STATUSES} from \"../constants/todoStatus\";\nimport {ITask} from \"../types\";\n\ninterface ITodoListProps {\n    todos: ITask[];\n    onTodoClick: (id: string) => void\n}\n\nconst {COMPLETED_TODO} = TODO_STATUSES;\n\nconst TodoList: React.FC<ITodoListProps> = (props: ITodoListProps): JSX.Element => {\n    const {todos} = props;\n    const onToggleTodo = useCallback(event => {console.log('nken');props.onTodoClick(event.target.dataset.id)}, [props.onTodoClick]);\n    return (\n        <ul className=\"Main w-full overflow-auto\">\n            {\n                todos.map((task: ITask) => {\n                    return (\n                        <div className=\"newtodo w-full h-auto flex items-center font-sans break-all text-2xl font-thin\" key={task.id}>\n                            <input className=\"absolute opacity-0 ml-4\" type=\"checkbox\" checked={task.todoStatus === COMPLETED_TODO}\n                                   onChange={onToggleTodo}\n                                   data-id={task.id}>\n                            </input>\n                            <div className=\"checkmark ml-2 h-6 w-6\" onClick={onToggleTodo} data-id={task.id}/>\n                            <label className={task.todoStatus ===  COMPLETED_TODO ? \"completed-todo ml-4 transition duration-150\": \"ml-4 transition duration-150\"} data-id={task.id} onClick={onToggleTodo}>{task.todo}</label>\n                        </div>\n                    )\n                })\n            }\n        </ul>\n    )\n};\n\nexport default TodoList\n\n\n","import React, {useCallback} from 'react'\n\nconst TODO_INPUT = \"todo-input\";\n\ninterface IFormProps {\n    submitTodo: (todo: string) => void\n}\n\nconst TodoInputForm: React.FC<IFormProps> = (props) => {\n\n    const onSubmitTodo = useCallback(event => {\n        event.preventDefault();\n        props.submitTodo(event.target[TODO_INPUT].value);\n        event.target[TODO_INPUT].value = '';\n    }, [props.submitTodo]);\n\n    return (\n        <form onSubmit={onSubmitTodo}>\n            <input className=\"header w-full h-16 p-4 font-sans font-hairline text-2xl leading-5\" type=\"text\" name={TODO_INPUT} placeholder=\"What needs to be done?\"/>\n        </form>\n    )\n};\n\nexport default TodoInputForm;\n","import React, {useCallback} from \"react\";\n\ninterface IFilterTabProps {\n    tabOption: string;\n    text: string;\n    onTabChange: (tab: string)=>void;\n    currentTab: string;\n}\n\nconst FilterTab: React.FC<IFilterTabProps> = (\n        props: IFilterTabProps\n): JSX.Element => {\n    const {onTabChange} = props;\n\n    const onTabClick = useCallback(()=>onTabChange(props.tabOption),[onTabChange]);\n\n    return (\n        <button className={props.currentTab === props.tabOption ? \"tab selected-tab m-1 p-1 font-sans font-thin\" : \"tab not-selected-tab m-1 p-1 font-sans font-thin\"} onClick={onTabClick} children={props.text}/>\n    )\n};\n\nexport default FilterTab","export const POSSIBLR_VISIBILLITY_FILTERS = {\n    SHOW_ALL: '@@filter/SHOW_ALL',\n    ACTIVE: '@@filter/ACTIVE',\n    COMPLETED: '@@filter/COMPLETED'\n};","import React from \"react\";\nimport FilterTab from \"./FilterTab\";\nimport {POSSIBLR_VISIBILLITY_FILTERS} from \"../constants/visibilityFilter\";\n\nconst {SHOW_ALL, ACTIVE, COMPLETED} = POSSIBLR_VISIBILLITY_FILTERS;\n\ninterface IFilterTabPanelProps {\n    onTabChange: (tab: string) => void;\n    currentTab: string\n}\n\nconst FilterTabPanel: React.FC<IFilterTabPanelProps> = (props: IFilterTabPanelProps) => {\n    const tabs = [\n        {\n            tabOption: SHOW_ALL,\n            text: \"All\",\n        },\n        {\n            tabOption: ACTIVE,\n            text: \"Active\"\n        },\n        {\n            tabOption: COMPLETED,\n            text: \"Completed\"\n        }\n    ];\n    return (\n        <div className=\"flex justify-evenly items-center w-4/12\">\n            {tabs.map(tab => <FilterTab tabOption={tab.tabOption} text={tab.text} onTabChange={props.onTabChange} currentTab={props.currentTab} />)}\n        </div>\n    )\n};\n\nexport default FilterTabPanel\n\n\n","export const ACTION_TYPES = {\n    CHANGE_FILTER: '@@action/CHANGE_FILTER',\n    ADD_TODO: '@@action/ADD_TODO',\n    TOGGLE_TODO: '@@action/TOGGLE_TODO',\n    CLEAR_COMPLETED_TODO: '@@action/CLEAR_COMPLETED_TODO',\n    UNDO: \"@@action/UNDO\",\n    REDO: \"@@action/REDO\"\n } as const;\n","import uniqueId from \"uuid/v1\"\nimport {ACTION_TYPES} from \"./constants/actionTypes\";\nimport {TODO_STATUSES} from \"./constants/todoStatus\";\nimport {ActionType, IState, ITask,ITodoState} from \"./types\";\n\nconst {ACTIVE_TODO, COMPLETED_TODO} = TODO_STATUSES;\nconst {CHANGE_FILTER, ADD_TODO, TOGGLE_TODO, CLEAR_COMPLETED_TODO,UNDO,REDO} = ACTION_TYPES;\n\nexport default function reducer(state: IState, action: ActionType): IState {\n\n    switch (action.type) {\n        case ADD_TODO: {\n            const currentTasks = state.tasks;\n            const foo1 = {\n                tasks: currentTasks.concat({\n                    todo: action.payload.text,\n                    id: uniqueId(),\n                    todoStatus: ACTIVE_TODO\n                }),\n                activeTab: state.activeTab\n            };\n            const newPastTasks = state.pastState.concat(foo1);\n            const newFutureTask: ITodoState[] = [];\n            return {\n                tasks: foo1.tasks,\n                activeTab: foo1.activeTab,\n                pastState: newPastTasks,\n                futureState: newFutureTask\n            }\n        }\n        case TOGGLE_TODO: {\n\n            const newTask = state.tasks.map((task: ITask) => {\n                if (task.id === action.payload.id) {\n                    return {\n                        ...task,\n                        todoStatus: task.todoStatus === ACTIVE_TODO ? COMPLETED_TODO : ACTIVE_TODO\n                    };\n                }\n                return task;\n            });\n\n            const foo1 = {\n                tasks: newTask,\n                activeTab: state.activeTab\n            };\n\n            const newPastTasks = state.pastState.concat(foo1);\n            const newFutureTask: ITodoState[] = [];\n            return {\n                ...foo1,\n                pastState: newPastTasks,\n                futureState: newFutureTask\n            }\n        }\n        case CHANGE_FILTER: {\n            const foo1 = {\n                tasks: state.tasks,\n                activeTab: action.payload.tab\n            };\n            const newPastTasks = state.pastState.concat(foo1);\n            const newFutureTask: ITodoState[] = [];\n            return {\n                ...foo1,\n                pastState: newPastTasks,\n                futureState: newFutureTask\n            }\n        }\n        case CLEAR_COMPLETED_TODO: {\n            const foo1 = {\n                activeTab: state.activeTab,\n                tasks: state.tasks.filter((task: ITask) => task.todoStatus === ACTIVE_TODO)\n            };\n            const newPastTasks = state.pastState.concat(foo1);\n            const newFutureTask: ITodoState[] = [];\n            return {\n                ...foo1,\n                pastState: newPastTasks,\n                futureState: newFutureTask\n            }\n        }\n        case UNDO: {\n            if(state.pastState.length === 1){\n                return state;\n            } else {\n                const newPastState = state.pastState.slice(0,state.pastState.length - 1);\n                const newFutureState = state.futureState.concat(state.pastState[state.pastState.length - 1]);\n                return {\n                    tasks: newPastState[newPastState.length - 1].tasks,\n                    activeTab: newPastState[newPastState.length - 1].activeTab,\n                    pastState: newPastState,\n                    futureState: newFutureState\n                }\n            }\n        }\n        case REDO: {\n            if(state.futureState.length === 0){\n                return state;\n            } else {\n                const newFutureState = state.futureState.slice(0,state.futureState.length - 1);\n                const newPastState = state.pastState.concat(state.futureState[state.futureState.length - 1]);\n                return {\n                    tasks: newPastState[newPastState.length - 1].tasks,\n                    activeTab: newPastState[newPastState.length - 1].activeTab,\n                    pastState: newPastState,\n                    futureState: newFutureState\n                }\n            }\n        }\n        default:\n            return state;\n    }\n}","import {POSSIBLR_VISIBILLITY_FILTERS} from \"./constants/visibilityFilter\";\nimport {TODO_STATUSES} from \"./constants/todoStatus\";\nimport {IState, ITask} from \"./types\";\n\n\nconst {SHOW_ALL, ACTIVE, COMPLETED} = POSSIBLR_VISIBILLITY_FILTERS;\nconst {ACTIVE_TODO, COMPLETED_TODO} = TODO_STATUSES;\n\nexport default function getVisibleTodos(activeTab: IState['activeTab'], tasks: IState['tasks']) {\n    let visibleTodos: ITask[] = [];\n    switch (activeTab) {\n        case SHOW_ALL:\n            visibleTodos = tasks;\n            break;\n        case ACTIVE:\n            visibleTodos = tasks.filter((tasks: ITask) => tasks.todoStatus === ACTIVE_TODO);\n            break;\n        case COMPLETED:\n            visibleTodos = tasks.filter((task: ITask) => task.todoStatus === COMPLETED_TODO);\n            break;\n        default:\n            visibleTodos = tasks;\n    }\n\n    return visibleTodos;\n}","import React, {useCallback, useEffect, useMemo, useReducer} from 'react';\nimport TodoList from \"./TodoList\";\nimport TodoInputForm from \"./TodoInputForm\";\nimport FilterTabPanel from \"./FilterTabPanel\";\nimport reducer from \"../reducer\";\nimport getVisibleTodos from \"../getVisibleTodos\";\n\nimport {IState, ITask} from \"../types\";\nimport {ACTION_TYPES} from \"../constants/actionTypes\";\nimport {POSSIBLR_VISIBILLITY_FILTERS} from \"../constants/visibilityFilter\";\nimport {TODO_STATUSES} from \"../constants/todoStatus\";\n\nimport '../App.css'\n\nconst {ADD_TODO, CLEAR_COMPLETED_TODO, CHANGE_FILTER, TOGGLE_TODO,UNDO,REDO} = ACTION_TYPES;\nconst {SHOW_ALL} = POSSIBLR_VISIBILLITY_FILTERS;\nconst {ACTIVE_TODO} = TODO_STATUSES;\nconst KEYCODE_OF_Z = 90;\n\nconst initialState: IState = {\n    tasks: [],\n    activeTab: SHOW_ALL,\n    pastState: [{tasks: [],activeTab: SHOW_ALL}],\n    futureState: []\n};\n\nfunction TodoApp() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const clearCompletedTodos = useCallback(() => dispatch({type: CLEAR_COMPLETED_TODO}), [dispatch]);\n\n    const onTabChange = useCallback((tab: string) => dispatch({type: CHANGE_FILTER, payload: {tab}}), [dispatch]);\n\n    const submitTodo = useCallback(todo => dispatch({type: ADD_TODO, payload: {text: todo}}), [dispatch]);\n\n    const toggleTodo = useCallback((id: string) => dispatch({type: TOGGLE_TODO, payload: {id}}), [dispatch]);\n\n    const remainingTaskCount = useMemo(() => state.tasks.filter((task: ITask) => task.todoStatus === ACTIVE_TODO).length, [state.tasks]);\n\n    const visibleTodos: ITask[] = useMemo(() => getVisibleTodos(state.activeTab, state.tasks), [state]);\n\n    const handleUndoRedoOnKeyDown = useCallback(event=> {\n\n        if(event.keyCode === KEYCODE_OF_Z && event.metaKey === true && event.shiftKey === true){\n            event.preventDefault();\n            dispatch({type: REDO});\n        }\n        else if(event.keyCode === KEYCODE_OF_Z && event.metaKey === true){\n            event.preventDefault();\n            dispatch({type: UNDO});\n        }\n    },[dispatch]);\n\n    useEffect(()=>{\n       document.addEventListener(\"keydown\",handleUndoRedoOnKeyDown);\n\n        return ()=> document.removeEventListener(\"keydown\", handleUndoRedoOnKeyDown);\n\n    },[handleUndoRedoOnKeyDown]);\n\n    return (\n        <div className=\"App bg-white mt-32 mb-10\">\n            <TodoInputForm submitTodo={submitTodo}/>\n            <TodoList todos={visibleTodos} onTodoClick={toggleTodo}/>\n            <div className=\"footer flex justify-around items-center font-sans font-light h-12\">\n                <p> {remainingTaskCount} item left</p>\n                <FilterTabPanel onTabChange={onTabChange} currentTab={state.activeTab}/>\n                <button className=\"tab m-1 p-1 font-sans font-thin\" onClick={clearCompletedTodos}> Clear Completed</button>\n            </div>\n        </div>\n    );\n}\n\nexport default TodoApp;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from \"./components/TodoApp\";\n\n\nReactDOM.render(<TodoApp />,document.getElementById('root'));\n"],"sourceRoot":""}